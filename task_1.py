# -*- coding: utf-8 -*-
"""Task-1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V-8vMGYi8ebOoxq_0xQrPJRKZ5menwGg

# ***Task-1 Prediction using Supervised Machine Learning Algorithm***


**Intention:-** To Predict the percentage of an student based on the no. of study hours.

# **Author: *Saran* D**

# **linear regression:**
In general linear regression algorithm which tells the relationship between two variables. From this task we are going to predict the scores of the student based on the number of hours they study.Assume that the response variable is hours of study and the predictor variable is score.
"""

#importing the required libraries
import pandas as pd 
import numpy as np
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import metrics
import seaborn as sns
from scipy import stats

# importing the Dataset
url = "https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv"
data = pd.read_csv(url)
print("Dataset has been imported!!!")

#Viewing the first 5 lines
data.head()

#Viewing the last 5 lines
data.tail()

#showing the labels for Dataframe
data.columns

#number of rows(25) and number of columns(2) in the DataFrame
data.shape

#printing information about the Dataframe 
print(data.info())

#Computing some statistical data for Datafram     
data.describe()

#Visualizing the data
sns.relplot(x='Hours', y='Scores',data=data) 
plt.title("Hours vs Score") 
plt.show()

sns.catplot("Hours",data=data,kind='box')
sns.catplot("Scores",data=data,kind='box')

# correlation of all columns in the dataframe
cor=data.corr()
cor

#Seaborn Correlation Heatmap 
sns.heatmap(cor,annot=True)
plt.show()
print('There is a postive relationship between Hours and Scores')

#Representing distribution of data(Scores)
sns.distplot(data['Scores'],hist=False)
print("From the below the Score distributed normally")

#preparing the data
x= data.iloc[:, :-1].values
y=data.iloc[:, 1].values

#Training data
from sklearn.linear_model import LinearRegression
x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2,random_state=0)
regressor = LinearRegression()

regressor.fit(x_train.reshape(-1,1),y_train)
print(f"The size of the train data and test data is {x_train.size,y_train.size,x_test.size,y_test.size}")
print("Training completed")

reg=LinearRegression()
model=reg.fit(x_train,y_train)
print(model.coef_), print(model.intercept_)

#The best fit of the line is Score = 2.018+9.912*hours

# Plotting the regression line
line=regressor.coef_*x+regressor.intercept_
#plotting for the test data
plt.scatter(x,y)
plt.plot(x,line,color='red');
plt.show()

"""## Prediction"""

#Testing data
print(x_test)
#predicton of the model
y_pred = regressor.predict(x_test)

#Comparing actual Vs predicted value
df =pd.DataFrame({'Actual': y_test,'Predicted':y_pred})
df

#Estimating training and test score 
print("Training score:", regressor.score(x_train,y_train))
print("Test score:", regressor.score(x_test,y_test))

#Plotting the bar graph to depict the difference between the actual and predicted value
df.plot(kind='bar',figsize=(5,5))
plt.grid(which='major',linewidth='0.5',color='green')
plt.grid(which='minor',linewidth='0.5',color='black')
plt.show()

Hours=9.25
predict_Score=model.predict([[Hours]])
predict_Score
print('Number of Hours= 9.25')
print("predict Score=",format(predict_Score[0]))

"""The value of root mean squared error is **4.647** which is less than 10% of the mean of percentage of all the studnets (**51.48**)

 R-Squared = 0.9454 means the model explain **94.54%** of the variability in the dependent variable(Score) by independent variable(Hours)


"""